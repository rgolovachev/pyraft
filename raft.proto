// python3 -m grpc_tools.protoc raft.proto --proto_path=. --python_out=. --grpc_python_out=.

syntax = "proto3";

message VoteRequest {
        int64 term = 1;
        int64 candidate_id = 2;
        int64 last_log_index = 3;
        int64 last_log_term = 4;
}

message AppendRequest {
        int64 term = 1;
        int64 leader_id = 2;
        int64 prev_log_index = 3;
        int64 prev_log_term = 4;
        repeated Entry entries = 5;
        int64 leader_commit = 6;
}

message GetLeaderReply {
        int64 leader_id = 1;
        string address = 2;
}

message SuspendRequest {
        int64 period = 1;
}

message SetRequest {
        string key = 1;
        string value = 2;
}
    
message SetReply {
        bool success = 1;
}
    
message GetRequest {
        string key = 1;
        bool need_master = 2;
        int64 last_applied = 3;
        bool last_applied_valid = 4;
}

message GetReply {
        GetReplyStatus status = 1;
        string value = 2;
        string redirect_addr = 3;
        int64 last_applied = 4;
}

message CasRequest {
        string key = 1;
        string expected = 2;
        string desired = 3;
}

message CasReply {
        bool success = 1;
        bool applied = 2;
        string old_value = 3;
}

message Entry {
        int64 term = 1;
        string key = 2;
        string value = 3;
}

message ResultWithTerm {
        int64 term = 1;
        bool result = 2; 
}

message EmptyMessage {}

enum GetReplyStatus {
        FAILED = 0;
        SUCCESS = 1;
        REDIRECT = 2;
}

service RaftNode {
        rpc RequestVote(VoteRequest) returns (ResultWithTerm) {}
        rpc AppendEntries(AppendRequest) returns (ResultWithTerm) {}
        rpc GetLeader(EmptyMessage) returns (GetLeaderReply) {}
        rpc Suspend(SuspendRequest) returns (EmptyMessage) {}
        rpc SetVal(SetRequest) returns (SetReply) {}
        rpc GetVal(GetRequest) returns (GetReply) {}
        rpc CasVal(CasRequest) returns (CasReply) {}
}
